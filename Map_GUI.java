
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * The GUI of the application.
 * @version 1.0
 * 
 * @author Colin Brown
 * @author Sinthuja Jeevarajhan
 * @author Victoria Houde
 * @author Edson Jun Da Huang
 * @author Ronak Toprani
 * 
 * @see javax.swing.JFrame
 */
public class Map_GUI extends javax.swing.JFrame{

    private DefaultListModel listModel = new DefaultListModel(); // list model that will hold contents of search jList
    private DefaultListModel favModel = new DefaultListModel();
    private DefaultListModel layerModel = new DefaultListModel();
    private DefaultListModel discoveryModel = new DefaultListModel();
    private DefaultListModel userModel = new DefaultListModel();
    private POI editingPOI;
    private int x;
    private int y;

    /**
     * Creates new form Map_GUI
     */
    public Map_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        mapScrollPane = new javax.swing.JScrollPane();
        mapPanel = new MapPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        mapName = new javax.swing.JLabel();
        DevModeLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        POIInfoLabel = new javax.swing.JLabel();
        POIInfoScrollPane = new javax.swing.JScrollPane();
        POIInfoPanel = new javax.swing.JTextArea();
        createButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        favButton = new javax.swing.JButton();
        SearchPOITabbedPane = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        for (POI poi : search("")) listModel.add(listModel.getSize(), poi);
        searchListBox = new javax.swing.JList<>();
        searchTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        POIDiscoveryScrollPane = new javax.swing.JScrollPane();
        for (Layer layer : App.curr.getLayers()) {
            for (POI poi : layer.getPOIs()) discoveryModel.add(discoveryModel.getSize(), poi);
        }
        POIDiscoveryList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        userPOIList = new javax.swing.JList<>();
        updateUserPOI();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        toggleLayer = new javax.swing.JButton();
        favScrollPane = new javax.swing.JScrollPane();
        favList = new javax.swing.JList<>();
        updateFavourites();
        favLabel = new javax.swing.JLabel();
        layerLabel = new javax.swing.JLabel();
        layerScrollPane = new javax.swing.JScrollPane();
        layerList = new javax.swing.JList<>();
        initiateLayers();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        poiName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        poiDesc = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        layersCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        xCoord = new javax.swing.JTextField();
        yCoord = new javax.swing.JTextField();
        setLocationButton = new javax.swing.JButton();
        markFav = new javax.swing.JCheckBox();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CurrentTempDisplay = new javax.swing.JLabel();
        weatherIcon = new javax.swing.JLabel();
        exitDevButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenuButton = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        helpMenuButton = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mapScrollPane.setViewportView(null);

        mapPanel.setPreferredSize(new java.awt.Dimension(1500, 907));
        mapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addGap(522, 522, 522)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(878, Short.MAX_VALUE))
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(768, Short.MAX_VALUE))
        );

        mapScrollPane.setViewportView(mapPanel);

        mapName.setText(App.curr.getBuildingName());

        DevModeLabel.setText("Developer Mode");
        DevModeLabel.setVisible(false);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        POIInfoLabel.setText("Selected POI Info");

        POIInfoPanel.setEditable(false);
        POIInfoPanel.setColumns(20);
        POIInfoPanel.setLineWrap(true);
        POIInfoPanel.setRows(5);
        POIInfoScrollPane.setViewportView(POIInfoPanel);

        createButton.setText("Create");
        createButton.setName(""); // NOI18N
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        favButton.setText("Toggle Favourite");
        favButton.setEnabled(false);
        favButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favButtonActionPerformed(evt);
            }
        });

        searchListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        searchListBox.setAlignmentX(0.0F);
        searchListBox.setAlignmentY(0.0F);
        searchListBox.setMinimumSize(new java.awt.Dimension(0, 264));
        searchListBox.setModel(listModel);
        searchListBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchListBoxMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(searchListBox);

        searchTextField.setText("Search POIs");
        searchTextField.setToolTipText("Search for a POI");
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextField)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SearchPOITabbedPane.addTab("Search POIs", jPanel5);

        POIDiscoveryList.setModel(discoveryModel);
        POIDiscoveryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                POIDiscoveryListMouseClicked(evt);
            }
        });
        POIDiscoveryScrollPane.setViewportView(POIDiscoveryList);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(POIDiscoveryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(POIDiscoveryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
        );

        SearchPOITabbedPane.addTab("Floor POIs", jPanel6);

        userPOIList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userPOIList.setAlignmentX(0.0F);
        userPOIList.setAlignmentY(0.0F);
        userPOIList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userPOIListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(userPOIList);

        SearchPOITabbedPane.addTab("User POIs", jScrollPane4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(POIInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(POIInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(favButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchPOITabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchPOITabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(POIInfoLabel)
                    .addComponent(favButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(POIInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        toggleLayer.setText("Toggle Layer");
        toggleLayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toggleLayerMouseClicked(evt);
            }
        });

        favList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        favList.setAlignmentX(0.0F);
        favList.setAlignmentY(0.0F);
        favList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                favListMouseClicked(evt);
            }
        });
        favScrollPane.setViewportView(favList);

        favLabel.setText("Favourites");

        layerLabel.setText("Layers");

        layerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        layerList.setToolTipText("");
        layerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                layerListMouseClicked(evt);
            }
        });
        layerScrollPane.setViewportView(layerList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(favScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(favLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(layerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toggleLayer))
                    .addComponent(layerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(favLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(favScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layerLabel)
                    .addComponent(toggleLayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(layerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Favourites and Layers", jPanel1);

        jLabel1.setText("Name");

        jLabel2.setText("Description:");

        poiDesc.setColumns(20);
        poiDesc.setRows(5);
        poiDesc.setWrapStyleWord(true);
        jScrollPane1.setViewportView(poiDesc);

        jLabel3.setText("Layers");

        layersCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("x");

        jLabel5.setText("y");

        setLocationButton.setText("Set Location");
        setLocationButton.setToolTipText("Set location after selecting spot on map");
        setLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLocationButtonActionPerformed(evt);
            }
        });

        markFav.setText("Favourite");

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Location:");

        jLabel7.setText("Click location on map, then set location");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(poiName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setLocationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(layersCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xCoord, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(markFav, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yCoord, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmButton)
                .addGap(74, 74, 74)
                .addComponent(cancelButton)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(poiName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(layersCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(setLocationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(xCoord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(yCoord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markFav)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Edit and Create", jPanel2);

        CurrentTempDisplay.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CurrentTempDisplay.setName(""); // NOI18N
        CurrentTempDisplay.setPreferredSize(new java.awt.Dimension(64, 64));
        CurrentTempDisplay.setVerifyInputWhenFocusTarget(false);
        CurrentTempDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CurrentTempDisplayMouseClicked(evt);
            }
        });

        weatherIcon.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N);
    weatherIcon.setName(""); // NOI18N
    weatherIcon.setPreferredSize(new java.awt.Dimension(64, 64));
    weatherIcon.setVerifyInputWhenFocusTarget(false);
    weatherIcon.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            weatherIconMouseClicked(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addComponent(CurrentTempDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(weatherIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addComponent(jTabbedPane1)
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(30, 30, 30)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(CurrentTempDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(weatherIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    jTabbedPane1.setEnabledAt(1, false);
    try {
        // Get current temperature
        double currentTemperature = WeatherAPI.getCurrentTemperature();

        // Update temperature display label
        CurrentTempDisplay.setText(String.format("%.1f°C", currentTemperature));

    } catch (IOException ex) {
        CurrentTempDisplay.setText("No Internet");
    }
    try {
        weatherIcon.setIcon(new ImageIcon(ImageIO.read(WeatherAPI.getWeatherIconUrl())));
    } catch (IOException ex){
        weatherIcon.setText("available!");
    }

    exitDevButton.setText("Exit Dev Mode");
    exitDevButton.setEnabled(false);
    exitDevButton.setVisible(false);
    exitDevButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitDevButtonActionPerformed(evt);
        }
    });

    fileMenuButton.setText("File");

    jMenuItem4.setText("Enter Developer Mode");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem4ActionPerformed(evt);
        }
    });
    fileMenuButton.add(jMenuItem4);

    jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    jMenuItem3.setText("Exit");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem3ActionPerformed(evt);
        }
    });
    fileMenuButton.add(jMenuItem3);

    jMenuBar1.add(fileMenuButton);

    helpMenuButton.setText("Help");

    jMenuItem1.setText("About");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem1ActionPerformed(evt);
        }
    });
    helpMenuButton.add(jMenuItem1);

    jMenuItem2.setText("FAQ");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem2ActionPerformed(evt);
        }
    });
    helpMenuButton.add(jMenuItem2);

    jMenuBar1.add(helpMenuButton);

    jMenu1.setText("Change Map");

    jMenu2.setText("Middlesex College");

    jMenuItem6.setText("MC Floor G");
    jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem6ActionPerformed(evt);
        }
    });
    jMenu2.add(jMenuItem6);

    jMenuItem7.setText("MC Floor 1");
    jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem7ActionPerformed(evt);
        }
    });
    jMenu2.add(jMenuItem7);

    jMenuItem8.setText("MC Floor 2");
    jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem8ActionPerformed(evt);
        }
    });
    jMenu2.add(jMenuItem8);

    jMenuItem9.setText("MC Floor 3");
    jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem9ActionPerformed(evt);
        }
    });
    jMenu2.add(jMenuItem9);

    jMenuItem10.setText("MC Floor 4");
    jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem10ActionPerformed(evt);
        }
    });
    jMenu2.add(jMenuItem10);

    jMenu1.add(jMenu2);

    jMenu3.setText("Health Science Building");

    jMenuItem11.setText("HSB Floor G");
    jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem11ActionPerformed(evt);
        }
    });
    jMenu3.add(jMenuItem11);

    jMenuItem12.setText("HSB Floor 2");
    jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem12ActionPerformed(evt);
        }
    });
    jMenu3.add(jMenuItem12);

    jMenuItem13.setText("HSB Floor 3");
    jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem13ActionPerformed(evt);
        }
    });
    jMenu3.add(jMenuItem13);

    jMenuItem14.setText("HSB Floor 4");
    jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem14ActionPerformed(evt);
        }
    });
    jMenu3.add(jMenuItem14);

    jMenu1.add(jMenu3);

    jMenu4.setText("Alumni Hall");

    jMenuItem15.setText("AH Floor G");
    jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem15ActionPerformed(evt);
        }
    });
    jMenu4.add(jMenuItem15);

    jMenuItem16.setText("AH Floor 1");
    jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem16ActionPerformed(evt);
        }
    });
    jMenu4.add(jMenuItem16);

    jMenuItem17.setText("AH Floor 2");
    jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem17ActionPerformed(evt);
        }
    });
    jMenu4.add(jMenuItem17);

    jMenu1.add(jMenu4);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(mapName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(55, 55, 55))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE))))
                .addGroup(layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(exitDevButton)
                    .addGap(18, 18, 18)
                    .addComponent(DevModeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(mapName)
                            .addGap(12, 12, 12)
                            .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DevModeLabel)
                                .addComponent(exitDevButton)))
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );

    mapScrollPane.getVerticalScrollBar().setValue(500);
    mapScrollPane.getHorizontalScrollBar().setValue(500);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method to search for POI from text using the text field
     * @param evt when search field text is clicked on, user is able to enter text into the text field
     */
    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        ArrayList<POI> matching = search(evt.getActionCommand());
        listModel.clear();
        for (POI poi : matching) {
            listModel.add(listModel.getSize(), poi);
        }
        searchListBox.setModel(listModel);
    }//GEN-LAST:event_searchTextFieldActionPerformed

   /**
     * Method when POI in search list is clicked, the map is adjusted to display it on the map
     * @param evt when a poi in the list is clicked, it is shown on the map
     */
    private void searchListBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchListBoxMouseClicked
        if (searchListBox.getSelectedIndex() >= 0) {
            App.selected = ((POI)listModel.get(searchListBox.getSelectedIndex())); // Get selected POI from list
            if(App.curr.getMapID() != App.selected.getMapID()) changeMap(App.selected.getMapID(), true); // Change map
            mapScrollPane.getHorizontalScrollBar().setValue(App.selected.getX()-(mapScrollPane.getWidth()/2)); // Set MapScrollPanel scroll to put POI in centre
            mapScrollPane.getVerticalScrollBar().setValue(App.selected.getY()-(mapScrollPane.getHeight()/2));
            enableButtons();
            POIInfoPanel.setText(App.selected.toStringInfo());
            favList.setModel(favModel);
        }
    }//GEN-LAST:event_searchListBoxMouseClicked

    /**
     * Method to highlight POI pins when clicked
     * @param evt when the user clicks on mapPanel, checks if they clicked on any POI pins
     */
    private void mapPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseClicked
        x = evt.getX();
        y = evt.getY();
        for (Layer layer : App.curr.getLayers()){
            for (POI poi : layer.getPOIs()){
                if (!poi.getVis()) {
                    continue; // Don't check if poi is not visable
                } // Don't check if poi is not visable
                if (evt.getX() > poi.getX()-(MapPanel.getPinWidth()/2) && evt.getX() < poi.getX()+(MapPanel.getPinWidth())){ // Check if the click is in the x range of the poi
                    if (evt.getY() > poi.getY()-MapPanel.getPinHeight() && evt.getY() < poi.getY()){ // Check if the click is in the y range of the poi
                        
                        // Display the info of the POI
                        mapScrollPane.getHorizontalScrollBar().setValue(poi.getX() - (mapScrollPane.getWidth() / 2)); // Set MapScrollPanel scroll to put POI in centre
                        mapScrollPane.getVerticalScrollBar().setValue(poi.getY() - (mapScrollPane.getHeight() / 2));
                        App.selected = poi;
                        POIInfoPanel.setText(App.selected.toStringInfo());
                        
                        //enable editing and deleting if permissions match
                        enableButtons();

                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_mapPanelMouseClicked
    /**
     *  Programmed to pop up details about the selected POI to edit
     * @param evt user clicks on the edit button
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here: 
        editingPOI = App.selected;
        poiName.setText(editingPOI.getName());
        poiDesc.setText(editingPOI.getDesc());
        xCoord.setText(Integer.toString(editingPOI.getX()));
        yCoord.setText(Integer.toString(editingPOI.getY()));
        markFav.setSelected(editingPOI.getFav());
        setLayers();
        layersCombo.setSelectedItem(editingPOI.getLayer());
        if (!App.Dev){
            layersCombo.setEnabled(false);
            xCoord.setEnabled(false);
            yCoord.setEnabled(false);
        }else{
            layersCombo.setEnabled(true);
            xCoord.setEnabled(true);
            yCoord.setEnabled(true);
        }
        jTabbedPane1.setEnabledAt(1,true);
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_editButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        App.selected = null;
        editingPOI = null;
        poiName.setText(null);
        poiDesc.setText(null);
        xCoord.setText(null);
        yCoord.setText(null);
        markFav.setSelected(false);
        setLayers();
        if(!App.Dev){
            layersCombo.setSelectedItem("Custom");
            layersCombo.setEnabled(false);
            xCoord.setEnabled(false);
            yCoord.setEnabled(false);
        }else{
            layersCombo.setEnabled(true);
            xCoord.setEnabled(true);
            yCoord.setEnabled(true);
        }
        jTabbedPane1.setEnabledAt(1,true);
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_createButtonActionPerformed
    /**
     * Programmed to pop up a prompt to ask if the user is sure they would like to delete the selected POI
     * @param evt delete button clicked
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String confirmMessage = "Are you sure you want to delete: " + App.selected.getName();
        String[] options = {"Delete", "Cancel"};
        int n = JOptionPane.showOptionDialog(this, confirmMessage, "DeletePOI", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        if(n==JOptionPane.YES_OPTION){
            App.curr.remPOI(App.selected);
            App.selected = null;
            updateGUI(App.selected);
            updateUserPOI();
            enableButtons();
        }
        updateDiscoveryList();
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Method to display the about menu
     * @param evt when the 'about' button is clicked, a Pane opens displaying a short description of the purpose of the software
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "The purpose of this software is to provide an interactive and customizable map for students and faculty at Western university." + "\n" + "Navigating buildings on campus can be tricky, so to make it easier for users to navigate we created this navigational students to help students get around Alumni Hall, Health Sciences Building and Middlesex. \n" +
"\n" +
"It will make it easier for users to find classrooms, offices, stairwells, and washrooms as well as discover new points of interests, such as eateries and study spaces." + "\n" + "They will also be able to add their own personal points of interest that are saved in the application. " + "\n" + "Password-protected developer permissions will allow access to edit the built-in points of interest." + "\n" + "Overall, this software aims to relieve the stress for students to allow them to save frequently visited locations within these buildings to help save time when navigating campus! \n" +
"\n" +
"Our software also features a weather API, which can help students easily access the weather when utilizing the application!"); 
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * Method to display the FAQ menu
     * @param evt when the 'faq' button is clicked a Pane opens displaying a list of FAQs about our software
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Welcome to the Western University Building Navigational Software Help Menu!\n" +
"\nHere are some frequently asked questions (FAQ's) that may help you navigate the software:\n" +
"\n" +
"1. How do I search for a specific room or location in the building?\n" +
"	• Click on the \"Search\" icon on the main menu.\n" +
"	• Type in the name of the location you're looking for in the search bar. You can search by building name, room number or a descriptor that matches your specific point of interest!\n" +
"	• Then press \"Enter\"!\n" +
"	• The software will display a list of results matching your search query. Click on the location you want to view on the map.\n" +
"2. How do I view parts of the map outside the display window?\n" +
"	• Use the scroll bars located on the right of the map or below the map window to scroll around various parts of the map.\n" +
"3. How do I open a new map?\n" +
"	• Find the 'Change Map' button in the menu in the top left portion of your screen, Hover over it, and select the building you would like to navigate to \n" +
"4. How do I enter developer mode?\n" +
"	• Find the file drop down in the menu in the top left portion of your screen, Hover over it, and locate 'Enter Dev Mode' in the drop down\n" +
"	• Click on it to be prompted to enter a password that provides you access to this section?\n" +
"		○ What if I forgot my password? Please reach out to our support team to arrange a verification to provide you with a new password! Developer mode cannot be accessed without a verified password!\n" +
"5. How do I exit the map?\n" +
"	• Find the file drop down in the menu in the top left portion of your screen. Hover over it, and locate 'Exit' in the drop down\n" +
"		○ Alternatively, press 'CTRL + Q' at any time when using the application to be prompted to close the program!\n" +
"	• Click the button, and follow the prompts to ensure you safely exit the program. \n" +
"6. Why isn't the weather updating?\n" +
"	• Click on the weather icon to refresh to the current weather! \n"
                + "• If you are currently not connected to Internet the current weather will not be avaliable, so please re-connect your internet and relaunch the application!\n" +
"7. Why is my delete button unavailable?\n" +
"	• Only developers are able to delete built in points of interest! To access developer mode, please refer to FAQ (4) in the help menu\n" +
"	• Do delete your own point of interest, please select the point of interest you would like to delete then hit the delete button!\n" +
"8. How do I view a point of interest description?\n" +
"	• Select the point of interest that you are interested in from the list on the right hand side\n" +
"	• A description of this point of interest will be highlighted on the screen along with it's location\n" +
"9. How do I favourite a point of interest?\n" +
"	• Select the point of interest you would like to favourite\n" +
"	• Select 'Toggle Favourite' \n"+
"	• Hit confirm to add it to your favourites list\n" +
"10. How do I view User Created POIs for a specific building?\n" + 
"	• Select the 'Floor POIs' tab next to the search POIs Tab \n" +
"	• Scroll through the displayed list to view user-created POIs within your current floor! \n"+
"\nWe hope this help menu has been useful for you. If you have any further questions, please don't hesitate to reach out to our support team.");
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    /**
     * @param evt when the button is clicked, the system exits safely
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show MC First Floor
     */
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        changeMap(1, false); 
    }//GEN-LAST:event_jMenuItem7ActionPerformed
     /**
     * @param evt when the button is clicked, the map is changed to show HSB Ground Floor
     */
    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        changeMap(5, false); 
    }//GEN-LAST:event_jMenuItem11ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show MC Ground Floor
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        changeMap(0, false); 
    }//GEN-LAST:event_jMenuItem6ActionPerformed
     /**
     * @param evt when the button is clicked, the map is changed to show MC Second Floor
     */
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        changeMap(2, false); 
    }//GEN-LAST:event_jMenuItem8ActionPerformed
     /**
     * @param evt when the button is clicked, the map is changed to show MC Third Floor
     */
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        changeMap(3, false); 
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show MC Fourth Floor
     */
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        changeMap(4, false); 
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show HSB Second Floor
     */
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        changeMap(6, false); 
    }//GEN-LAST:event_jMenuItem12ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show HSB Third Floor
     */
    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        changeMap(7, false); 
    }//GEN-LAST:event_jMenuItem13ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show HSB Fourth Floor
     */
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        changeMap(8, false); 
    }//GEN-LAST:event_jMenuItem14ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show AH Ground Floor
     */
    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        changeMap(9, false); 
    }//GEN-LAST:event_jMenuItem15ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show AH First Floor
     */
    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        changeMap(10, false); 
    }//GEN-LAST:event_jMenuItem16ActionPerformed
    /**
     * @param evt when the button is clicked, the map is changed to show AH Second Floor
     */
    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        changeMap(11, false); 
    }//GEN-LAST:event_jMenuItem17ActionPerformed
    
    /**
     * User is prompted to enter correct password to enter developer mode
     * @param evt when enter developer mode button is clicked
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String s = (String)JOptionPane.showInputDialog(this, "Enter Password", "Developer Mode", 
                JOptionPane.PLAIN_MESSAGE);
        if (s.equals(App.password)){
            App.Dev = true;
            //App.selected = null;
            //App.selectedLayer = null;
            updateGUI(App.selected);
            //searchListBox.clearSelection();
            enableButtons();
            layersCombo.setEnabled(true);
            xCoord.setEnabled(true);
            yCoord.setEnabled(true);
            DevModeLabel.setVisible(true);
            exitDevButton.setEnabled(true);
            exitDevButton.setVisible(true);
        } else{
            App.Dev = false;
            enableButtons();
            DevModeLabel.setVisible(false);
            JOptionPane.showMessageDialog(this, "Incorrect Password", "Developer Mode", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void toggleLayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleLayerMouseClicked
        try {
            if (!(App.selectedLayer.getName().equals("Accessibility") ||
                    App.selectedLayer.getName().equals("Washrooms"))) {
                
                for (Building building : App.buildings) {
                    for (Map map : building.getMaps()) {
                        for (Layer layer : map.getLayers()) {
                            if (App.selectedLayer.getName().equals(layer.getName())) {
                                ArrayList<POI> poi = layer.getPOIs();
                                for (int i = 0; i < poi.size(); i++) {
                                    poi.get(i).setVis(!poi.get(i).getVis());
                                }
                            }
                        }
                    }
                }
                mapPanel.repaint();
                initiateLayers();
                App.selectedLayer = null;
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_toggleLayerMouseClicked

    private void favListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favListMouseClicked
        if (favList.getSelectedIndex() >= 0) {
            App.selected = ((POI)favModel.get(favList.getSelectedIndex()));
            if (App.curr.getMapID() != App.selected.getMapID()) {
                changeMap(App.selected.getMapID(), true);
            }
            mapScrollPane.getHorizontalScrollBar().setValue(App.selected.getX() 
                    - (mapScrollPane.getWidth() / 2));
            mapScrollPane.getVerticalScrollBar().setValue(App.selected.getY() 
                    - (mapScrollPane.getHeight() / 2));
            POIInfoPanel.setText(App.selected.toStringInfo());
            searchListBox.setModel(listModel);
        }
        enableButtons();
    }//GEN-LAST:event_favListMouseClicked

    private void layerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_layerListMouseClicked
        if (layerList.getSelectedIndex() >= 0) {
            App.selectedLayer = ((Layer)layerModel.get(layerList.
                    getSelectedIndex()));
        }
        System.out.println(App.selectedLayer.getPOIs().size() + " - " + App.selectedLayer.getName());
    }//GEN-LAST:event_layerListMouseClicked

    private void favButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favButtonActionPerformed
        if (App.selected.getFav()){
            App.selected.setFav(false);
            POI favP = App.selected;
            App.curr.remPOI(App.selected);
            App.curr.addPOI(favP);
            App.selected = favP;
        }else{
            App.selected.setFav(true);
            POI favP = App.selected;
            App.curr.remPOI(App.selected);
            App.curr.addPOI(favP);
            App.selected = favP;
        }
        //JSON.writeJSON(App.curr.getBuildingName(), App.curr.getMetadata(), App.curr.getMapImage(), App.curr.getSizeX(), App.curr.getSizeY(), App.curr.getFloor(), App.curr.getMapID(), App.curr.getLayers());
        updateGUI(App.selected);
    }//GEN-LAST:event_favButtonActionPerformed

    private void setLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLocationButtonActionPerformed
        xCoord.setText(Integer.toString(x));
        yCoord.setText(Integer.toString(y));
    }//GEN-LAST:event_setLocationButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String lay = (String) layersCombo.getSelectedItem();
        int xC = Integer.parseInt(xCoord.getText());
        int yC = Integer.parseInt(yCoord.getText());
        POI nP = new POI(poiName.getText(), poiDesc.getText(), 
                markFav.isSelected(), App.curr.getMapID(), 
                lay, xC, yC, true);
        if (editingPOI != null){
            App.curr.remPOI(editingPOI);
        }
        App.curr.addPOI(nP);
        
        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setEnabledAt(1, false);
        App.selected = nP;
        updateGUI(App.selected);
        updateUserPOI();
        enableButtons();
        updateDiscoveryList();
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        editingPOI = null;
        poiName.setText(null);
        poiDesc.setText(null);
        xCoord.setText(null);
        yCoord.setText(null);
        markFav.setSelected(false);
        layersCombo.setSelectedItem("Default");
        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setEnabledAt(1,false);
        updateGUI(App.selected);
        enableButtons();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void POIDiscoveryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_POIDiscoveryListMouseClicked
        if (POIDiscoveryList.getSelectedIndex() >= 0) {
            App.selected = ((POI)discoveryModel.get(POIDiscoveryList.getSelectedIndex())); // Get selected POI from list
            mapScrollPane.getHorizontalScrollBar().setValue(App.selected.getX()-(mapScrollPane.getWidth()/2)); // Set MapScrollPanel scroll to put POI in centre
            mapScrollPane.getVerticalScrollBar().setValue(App.selected.getY()-(mapScrollPane.getHeight()/2));
            enableButtons();
            POIInfoPanel.setText(App.selected.toStringInfo());
        }
    }//GEN-LAST:event_POIDiscoveryListMouseClicked

    private void userPOIListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userPOIListMouseClicked
        if (userPOIList.getSelectedIndex() >= 0) {
            App.selected = ((POI)userModel.get(userPOIList.getSelectedIndex()));
            if (App.curr.getMapID() != App.selected.getMapID()) {
                changeMap(App.selected.getMapID(), true);
            }
            mapScrollPane.getHorizontalScrollBar().setValue(App.selected.getX() 
                    - (mapScrollPane.getWidth() / 2));
            mapScrollPane.getVerticalScrollBar().setValue(App.selected.getY() 
                    - (mapScrollPane.getHeight() / 2));
            POIInfoPanel.setText(App.selected.toStringInfo());
            searchListBox.setModel(listModel);
        }
        enableButtons();
    }//GEN-LAST:event_userPOIListMouseClicked

    private void exitDevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitDevButtonActionPerformed
        // TODO add your handling code here:
            App.Dev = false;
            enableButtons();
            if (editingPOI!=null){
                editingPOI = null;
                poiName.setText(null);
                poiDesc.setText(null);
                xCoord.setText(null);
                yCoord.setText(null);
                markFav.setSelected(false);
                //layersCombo.setSelectedItem("Default");
                jTabbedPane1.setSelectedIndex(0);
                jTabbedPane1.setEnabledAt(1,false);
                updateGUI(App.selected);
            }
            layersCombo.setSelectedItem("Custom");
            layersCombo.setEnabled(false);
            xCoord.setEnabled(false);
            yCoord.setEnabled(false);
            DevModeLabel.setVisible(false);
            exitDevButton.setEnabled(false);
            exitDevButton.setVisible(false);
    }//GEN-LAST:event_exitDevButtonActionPerformed

    private void weatherIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weatherIconMouseClicked
        // TODO add your handling code here:
        updateWeather();
    }//GEN-LAST:event_weatherIconMouseClicked

    private void CurrentTempDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CurrentTempDisplayMouseClicked
        // TODO add your handling code here:
        updateWeather();
    }//GEN-LAST:event_CurrentTempDisplayMouseClicked
    
    private void updateDiscoveryList() {
        discoveryModel.clear();
        for (Layer layer : App.curr.getLayers()) {
            for (POI poi : layer.getPOIs()) discoveryModel.add(discoveryModel.getSize(), poi);
        }
    }
    
/**
     * Method to search for a POIs
     * @param search user input that is matched with POI metadata to find corresponding POIS
     * @return array list of matching POIS that match the user input
     */
    private ArrayList<POI> search(String search) {
        ArrayList<POI> matchingPOIs = new ArrayList<>();
        for (Building building : App.buildings) {
            for (Map map : building.getMaps()) {
                for (Layer layer : map.getLayers()) {
                    for (POI poi : layer.getPOIs()) {
                        if (poi.contains(search)) {
                            matchingPOIs.add(poi); // If given POI name or desc contains the search string, add it to the list of matching POIs
                        }
                    }
                }
            }
        }
        return matchingPOIs;
    }
    
    /**
     * Method to change the map image displayed
     * @param id integer value corresponds to index in array stored in Building which correspond to a specific map image URL to load in
     */
    private void changeMap(int id, Boolean selected) {
        // Find the map in all buildings to set as curr based on its id
        for (Building building : App.buildings) {
            for (Map map : building.getMaps()) {
                if (map.getMapID() == id) {
                    App.curr = map;
                    //if we don't want to keep the selectedPOI selected, set it null when map is changed
                    if (!selected){
                        App.selected = null;
                        editButton.setEnabled(false);
                        deleteButton.setEnabled(false);
                        POIInfoPanel.setText(null);
                    }
                    break;
                }
            }
        }
        mapName.setText(App.curr.getBuildingName()); // Update text displayed above map
        MapPanel.setMap(id); // Update map image
        mapPanel.repaint(); // Repaint the map image
        initiateLayers();
        updateDiscoveryList();
    }
    /**
     * Creates and sets the model for the layers combo box
     */
    private void setLayers(){
        DefaultComboBoxModel layersCom = new DefaultComboBoxModel<>();
        for(Layer l:App.curr.getLayers()) layersCom.addElement(l.getName());
        layersCombo.setModel(layersCom);
    }
    /**
     * Method to enable buttons when the password for developer mode is successfully entered
     */
    private void enableButtons(){
        if(App.selected == null){
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            favButton.setEnabled(false);
        } else if(App.Dev){
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
            favButton.setEnabled(true);
        }else if (!App.Dev & (App.selected.getLayer().equals("Custom"))){
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
            favButton.setEnabled(true);
        }else if (!App.Dev & (!App.selected.getLayer().equals("Custom"))){
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            favButton.setEnabled(true);
        }
    }
    
    /**
     * This method searches for all favourited POIs and returns an ArrayList
     * of those favourites
     * @return favourites
     */
    private ArrayList<POI> searchFavourites() {
        ArrayList<POI> favourites = new ArrayList<>();
        for (Building building : App.buildings) {
            for (Map map : building.getMaps()) {
                for (Layer layer : map.getLayers()) {
                    for (POI poi : layer.getPOIs()) {
                        if (poi.getFav()) favourites.add(poi);
                    }
                }
            }
        }
        return favourites;
    }
    
    /**
     * This method updates the existing favourites list
     */
    private void updateFavourites() {
        ArrayList<POI> favourites = searchFavourites();
        //System.out.println(favourites.get(0));
        favModel.clear();
        for (POI favourite : favourites) {
            favModel.add(favModel.getSize(), favourite);
        }
        favList.setModel(favModel);
    }
    /**
     * This method updates the WeatherIcon & Current Temperature
     */
    private void updateWeather() {
        
        try {
            // Get current temperature
            double currentTemperature = WeatherAPI.getCurrentTemperature();
            
            // Update temperature display label & weather Icon
            weatherIcon.setIcon(new ImageIcon(ImageIO.read(WeatherAPI.getWeatherIconUrl())));
            CurrentTempDisplay.setText(String.format("%.1f°C", currentTemperature));
        } catch (IOException ex) {
            weatherIcon.setIcon(null);
            weatherIcon.setText("available!");CurrentTempDisplay.setText("No Internet");
        }}
    
    
    /**
     * The method returns the layers from the current map
     * @return layers
     */
    private ArrayList<Layer> searchLayers() {
        Map currMap = App.curr;
        ArrayList<Layer> layers = currMap.getLayers();
        return layers;
    } 
    
    /**
     * This method initiates the layers in the layers menu
     */
    private void initiateLayers() {
        ArrayList<Layer> layers = searchLayers();
        layerModel.clear();
        for (Layer layer : layers) {
            layerModel.add(layerModel.getSize(), layer);
        }
        layerList.setModel(layerModel);
    }
    
    /**
     * This method updates the GUI of the application
     * @param selected, the current user selected POI
     */
    private void updateGUI(POI selected){
        mapPanel.repaint();
        updateFavourites();
        updateWeather();
        if (selected == null){
            POIInfoPanel.setText(null);
        }else{
            POIInfoPanel.setText(selected.toStringInfo());
        }
        if(searchTextField.getText().equals("Search POIs")){
            for (POI poi : search("")) listModel.add(listModel.getSize(), poi);
        }else{
            ArrayList<POI> matching = search(searchTextField.getText());
            listModel.clear();
            for (POI poi : matching) {
                listModel.add(listModel.getSize(), poi);
            }
            searchListBox.setModel(listModel);
        }
    }
    
        /**
     * This method searches for all user created POIs
     * @return ArrayList of all user created POIs
     */
    private ArrayList<POI> searchUserPOI() {
        ArrayList<POI> userPOI = new ArrayList<>();
        for (Building building : App.buildings) {
            for (Map map : building.getMaps()) {
                for (Layer layer : map.getLayers()) {
                    if (layer.getName().equals("Custom")) {
                        for (POI poi : layer.getPOIs()) {
                            userPOI.add(poi);
                        }
                    }
                }
            }
        }
        return userPOI;
    }
    
    /**
     * This method updates the user created POIs
     */
    private void updateUserPOI() {
        ArrayList<POI> userPOI = searchUserPOI();
        userModel.clear();
        for (POI poi : userPOI) {
            userModel.add(userModel.getSize(), poi);
        }
        userPOIList.setModel(userModel);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurrentTempDisplay;
    private javax.swing.JLabel DevModeLabel;
    private javax.swing.JList<String> POIDiscoveryList;
    private javax.swing.JScrollPane POIDiscoveryScrollPane;
    private javax.swing.JLabel POIInfoLabel;
    private javax.swing.JTextArea POIInfoPanel;
    private javax.swing.JScrollPane POIInfoScrollPane;
    private javax.swing.JTabbedPane SearchPOITabbedPane;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton exitDevButton;
    private javax.swing.JButton favButton;
    private javax.swing.JLabel favLabel;
    private javax.swing.JList<String> favList;
    private javax.swing.JScrollPane favScrollPane;
    private javax.swing.JMenu fileMenuButton;
    private javax.swing.JMenu helpMenuButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel layerLabel;
    private javax.swing.JList<String> layerList;
    private javax.swing.JScrollPane layerScrollPane;
    private javax.swing.JComboBox<String> layersCombo;
    private javax.swing.JLabel mapName;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JScrollPane mapScrollPane;
    private javax.swing.JCheckBox markFav;
    private javax.swing.JTextArea poiDesc;
    private javax.swing.JTextField poiName;
    private javax.swing.JList<String> searchListBox;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton setLocationButton;
    private javax.swing.JButton toggleLayer;
    private javax.swing.JList<String> userPOIList;
    private javax.swing.JLabel weatherIcon;
    private javax.swing.JTextField xCoord;
    private javax.swing.JTextField yCoord;
    // End of variables declaration//GEN-END:variables
}
